# Projeto 4P — Documentação de Boas Práticas

## Integrantes

- Arthur Pereira / 06006065
- Matheus Cunha / 06006159
- Vitor Garcia / 06006002
- Miguel Chaves / 06006125

## Link do vídeo

### [Vídeo](https://drive.google.com/drive/folders/1atQrYuffCZiw1yYPnaaC6V0RgTGaS4Oy?usp=sharing)

## 1. Organização em camadas

- **Apresentação:** `Controllers/`
- **Domínio:** `Services/`
- **Infraestrutura:** `Repository/`, `Data/`
- Exemplos:
  - [`Services`](Projeto4pServer/Services)
  - [`Repository`](Projeto4pServer/Repository)
  - [`Controllers`](Projeto4pServer/Controllers)
  - [`Data`](Projeto4pServer/Data)
  - [`Test`](Projeto4pServer.Tests)

---

## 2. Aplicação de padrões de projeto

- **Repository:**
  - [`Repository/InventoryRepository.cs`](Projeto4pServer/Repository/InventoryRepository.cs) (linhas 7-54)
  - [`Repository/CharacterRepository.cs`](Projeto4pServer/Repository/CharacterRepository.cs)
  - Usado para abstrair o acesso a dados e facilitar testes.
- **DTO:**
  - [`DTOs/CharacterDto.cs`](Projeto4pSharedLibrary/DTOs/CharacterDTO.cs)
  - [`DTOs/InventoryDto.cs`](Projeto4pSharedLibrary/DTOs/InventoryDTO.cs)

---

## 3. Princípios SOLID em prática

- **Single Responsibility Principle:**
  - Cada service e repository tem responsabilidade única.
  - Exemplo:
    - [`Services/UserService.cs`](Projeto4pServer/Services/UserService.cs) (linhas 11-60)
    - [`Services/CharacterSkillsService.cs`](Projeto4pServer/Services/CharacterSkillsService.cs)
- **Open/Closed Principle:**
  - [`Services/DeleteService.cs`](Projeto4pServer/Services/DeleteService.cs) permite extensão para qualquer entidade.
- **Dependency Inversion Principle:**
  - Controllers dependem de interfaces, não implementações concretas:
    - [`Controllers/CharacterController.cs`](Projeto4pServer/Controllers/CharacterController.cs)

---

## 4. Convenções de nomenclatura claras

- **Nomes claros e sem abreviações:**
  - Exemplo: `UserRepository`, `InventoryService`, `DeleteService`
  - [`Repository/UserRepository.cs`](Projeto4pServer/Repository/UserRepository.cs)
  - [`Services/InventoryService.cs`](Projeto4pServer/Services/InventoryService.cs)
  - [`DTOs/AgendaDto.cs`](Projeto4pSharedLibrary/DTOs/AgendaDTO.cs)
  - [`Classes/CharacterSkills.cs`](Projeto4pSharedLibrary/Classes/CharacterSkills.cs)

---

## 5. Documentação mínima de código

- **Comentários objetivos em métodos complexos:**
  - [`Services/CharacterService.cs`](Projeto4pServer/Services/CharacterService.cs) (linhas 167-183)
  - [`Controllers/CharacterController.cs`](Projeto4pServer/Controllers/CharacterController.cs) (linhas 61-82)

---

## 6. Testes automatizados

- **Teste unitário usando xUnit:**
  - [`Projeto4pServer.Tests/UserServiceTests.cs`](Projeto4pServer.Tests/UserServiceTests.cs) (linhas 13-41)

---

## 7. Refatorações evidentes

### Exemplo: Refatoração do método Delete

#### Antes da refatoração (em cada Service):

```csharp
// public async Task DeleteInventoryAsync(long id)
// {
//     var inventoryToDelete = await _context.Set<Inventory>().FindAsync(id);
//     if (inventoryToDelete != null)
//     {
//         _context.Set<Inventory>().Remove(inventoryToDelete);
//         await _context.SaveChangesAsync();
//     }
// }
```

#### Depois da refatoração (DeleteService genérico):

```csharp
// filepath: Services/DeleteService.cs (linhas 8-27)
public class DeleteService<T> where T : class
{
    private readonly AppDbContext _context;

    public DeleteService(AppDbContext context)
    {
        _context = context;
    }

    public async Task DeleteAsync(long id)
    {
        var entity = await _context.Set<T>().FindAsync(id);
        if (entity == null)
        {
            throw new KeyNotFoundException($"{typeof(T).Name} not found.");
        }

        _context.Set<T>().Remove(entity);
        await _context.SaveChangesAsync();
    }
}
```

- [`Projeto4pServer`](Projeto4pServer\Services\CharacterService.cs) (linhas 134 a 144)

Agora, todos os serviços que precisam de delete podem herdar de `DeleteService<T>` e usar `DeleteAsync(id)`.

- **Outras refatorações:**
  - Uso de DTOs para separar entidades de domínio e transporte.
  - Extração de métodos auxiliares para validação em `CharacterSkillsService`.

---

## 8. Tratamento de erros e exceções

- **Uso de try/catch e respostas padronizadas:**
  - [`Controllers/CharacterController.cs`](Projeto4pServer/Controllers/CharacterController.cs) (linhas 68-80)
  - [`Controllers/CharacterSkillsController.cs`](Projeto4pServer/Controllers/CharacterSkillsController.cs) (linhas 34-56)
  - Validação de argumentos em `Services/CharacterSkillsService.cs` (linhas 41-60)

---

## 9. Exemplos de validação de entrada

- **Validação de parâmetros e proteção contra dados inválidos:**
  - [`Services/UserService.cs`](Projeto4pServer/Services/UserService.cs) (linhas 17-34)
  - [`Services/InventoryService.cs`](Projeto4pServer/Services/InventoryService.cs) (linhas 23-46)
  - [`Services/CharacterSkillsService.cs`](Projeto4pServer/Services/CharacterSkillsService.cs) (linhas 41-60)
  - [`Controllers/CharacterController.cs`](Projeto4pServer/Controllers/CharacterController.cs) (linhas 53-67)
  - [`ViewExorcist`](Projeto4pBlazor\Pages\View-Exorcist.razor) (linhas 176-208)

---

## 10. Heurísticas de usabilidade no frontend

- **Visibilidade do Status do Sistema**
  - `Pages/New-Exorcist.razor` (linhas 17-354, Os campos são divididos em caixas que representam etapas diferentes na criação do personagem.)
  - `Pages/Home.razor` (linhas 49-57, caso o usuário esteja logado e tente entrar em uma página, o sistema avisa ela que não está logado.)
- **Correspondência entre o sistema e o mundo real**
  - `Pages/Home.razor` (linhas 10-36, Resume de maneira direta o que o botão faz em um texto mais apagado abaixo do botão.)
- **Controle e liberdade para o usuário**
  - `Pages/MainLayout.razor` (linhas 7-11, A logo do site, TEMERITY, é um link constantemente disponível que automaticamente leva para a homepage.)
- **Consistência e padronização**
  - `Pages/Home.razor` e `Pages/New-Exorcist.razor` (linhas 10-36 e linhas 17-354, Títulos como NEW EXORCIST, AGENTS, SIN REGISTRY e campos nos formulários usam uma mesma fonte estilizada e o uso de cores nos destaques tornam o estilo consistente.)
- **Prevenção de erros**
  - `Pages/MainLayout.razor` (linhas 23-33, o usuário precisa confirmar se quer dar logout ou não.)
- **Reconhecimento em vez de recordação**
  - `Pages/MainLayout.razor` (linhas 7-36, O usuário pode encontrar o botão de login e um cumprimento típico no canto superior direito e a logo do site no canto superior esquerdo.)
- **Eficiência e flexibilidade de uso**
  - `Pages/New-Exorcist.razor` (linhas 17-354, A tela de criação de exorcista distribui os campos em blocos separados, permitindo que o usuário vá direto ao que precisa e o botão REGISTER destacado na parte inferior permite registro imediato sem navegação extra.)
- **Estética e design minimalista**

  - `Pages/MainLayout.razor`, `Pages/Home.razor` e `Pages/New-Exorcist.razor` (linhas 7-11, linhas 10-36 e linhas 17-354, O site possui uma paleta escura e elementos em roxo e rosa consistentemente e é minimalista tanto estilisticamente quanto funcionalmente.)

- **Ajude os usuários a reconhecer, diagnosticar e recuperar erros**

  - `Pages/Agents.razor` (linhas 24-27, se o usuário não tiver nenhum personagem registrado, o sistema o avisa e apresenta a opção de criar um personagem.)

- **Ajuda e documentação**
  - A Documentação é o sistema de rpg em si https://tombloom.itch.io/cain

---

> **Observação:** Os números de linhas podem variar conforme alterações futuras. Consulte sempre a versão mais recente do repositório.
