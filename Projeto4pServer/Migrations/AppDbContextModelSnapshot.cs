// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Projeto4pServer.Data;

#nullable disable

namespace Projeto4pServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.Agenda", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AgendaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BoldItem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalItem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecialRule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.AgendaAbilities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AbilityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("AgendaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.ToTable("AgendaAbilities");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.Blasphemy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BlasphemyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Passive")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Blasphemies");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.BlasphemyAbilities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AbilityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("BlasphemyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlasphemyId");

                    b.ToTable("BlasphemyAbilities");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.CharAgenda", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgendaAbilityId")
                        .HasColumnType("bigint");

                    b.Property<long>("AgendaId")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AgendaAbilityId");

                    b.HasIndex("AgendaId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharAgendas");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.CharBlasphemy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BlasphemyAbilityId")
                        .HasColumnType("bigint");

                    b.Property<long>("BlasphemyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlasphemyAbilityId");

                    b.HasIndex("BlasphemyId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharBlasphemies");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Advance")
                        .HasColumnType("integer");

                    b.Property<int>("Burst")
                        .HasColumnType("integer");

                    b.Property<int>("CAT")
                        .HasColumnType("integer");

                    b.Property<string>("CharacterXID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DivineAgony")
                        .HasColumnType("integer");

                    b.Property<string>("EyeColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HairColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Injury")
                        .HasColumnType("integer");

                    b.Property<int>("KitPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Marks")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SinOverflow")
                        .HasColumnType("integer");

                    b.Property<int>("Stress")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("XP")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.CharacterSkills", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Authority")
                        .HasColumnType("integer");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("Conditioning")
                        .HasColumnType("integer");

                    b.Property<int>("Connection")
                        .HasColumnType("integer");

                    b.Property<int>("Coordination")
                        .HasColumnType("integer");

                    b.Property<int>("Covert")
                        .HasColumnType("integer");

                    b.Property<int>("Force")
                        .HasColumnType("integer");

                    b.Property<int>("Interfacing")
                        .HasColumnType("integer");

                    b.Property<int>("Investigation")
                        .HasColumnType("integer");

                    b.Property<int>("Negotiation")
                        .HasColumnType("integer");

                    b.Property<int>("Surveillance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("text");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResetCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetCodeExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.AgendaAbilities", b =>
                {
                    b.HasOne("Projeto4pSharedLibrary.Classes.Agenda", "Agenda")
                        .WithMany("Abilities")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.BlasphemyAbilities", b =>
                {
                    b.HasOne("Projeto4pSharedLibrary.Classes.Blasphemy", "Blasphemy")
                        .WithMany("BlasphemyAbilities")
                        .HasForeignKey("BlasphemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blasphemy");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.CharAgenda", b =>
                {
                    b.HasOne("Projeto4pSharedLibrary.Classes.AgendaAbilities", "AgendaAbility")
                        .WithMany()
                        .HasForeignKey("AgendaAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto4pSharedLibrary.Classes.Agenda", "Agenda")
                        .WithMany()
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto4pSharedLibrary.Classes.Character", "Character")
                        .WithMany("CharAgendas")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agenda");

                    b.Navigation("AgendaAbility");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.CharBlasphemy", b =>
                {
                    b.HasOne("Projeto4pSharedLibrary.Classes.BlasphemyAbilities", "BlasphemyAbility")
                        .WithMany()
                        .HasForeignKey("BlasphemyAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto4pSharedLibrary.Classes.Blasphemy", "Blasphemy")
                        .WithMany()
                        .HasForeignKey("BlasphemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto4pSharedLibrary.Classes.Character", "Character")
                        .WithMany("CharBlasphemies")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blasphemy");

                    b.Navigation("BlasphemyAbility");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.Character", b =>
                {
                    b.HasOne("Projeto4pSharedLibrary.Classes.User", null)
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.CharacterSkills", b =>
                {
                    b.HasOne("Projeto4pSharedLibrary.Classes.Character", "Character")
                        .WithOne("CharacterSkills")
                        .HasForeignKey("Projeto4pSharedLibrary.Classes.CharacterSkills", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.Inventory", b =>
                {
                    b.HasOne("Projeto4pSharedLibrary.Classes.Character", "Character")
                        .WithMany("Inventories")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.Agenda", b =>
                {
                    b.Navigation("Abilities");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.Blasphemy", b =>
                {
                    b.Navigation("BlasphemyAbilities");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.Character", b =>
                {
                    b.Navigation("CharAgendas");

                    b.Navigation("CharBlasphemies");

                    b.Navigation("CharacterSkills");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Projeto4pSharedLibrary.Classes.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
