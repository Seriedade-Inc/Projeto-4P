@page "/Agents"
@inject HttpClient Http
@inject UserSession UserSession
@using Projeto4pServer.DTOs
@inject NavigationManager NavigationManager

<style>
.agent-card {
    transition: box-shadow 0.2s, border-color 0.2s;
    cursor: pointer;
}
.agent-card:hover {
    box-shadow: 0 0 0 4px #a78bfa, 0 0 16px 4px #a78bfa;
    border-color: #a78bfa;
}
</style>

<main>
    <div class="flex flex-wrap justify-center bg-black text-white p-4 min-h-screen">
        @if (characters == null)
        {
            <p>Carregando agentes...</p>
        }
        else if (!characters.Any())
        {
            <p>Você ainda não criou nenhum agente, teste. Clique em "Criar Agente" para começar!</p>
        }
        else
        {
            @foreach (var character in characters)
            {
                // character.Id is the CharacterId property from CharacterDto
                // It is passed to the View-Exorcist page via the URL parameter
                <div class="agent-card bg-neutral-800 rounded-lg shadow-lg p-4 m-4 w-64 h-128 overflow-y-auto border-2 border-transparent"
                     @onclick="@(() => NavigationManager.NavigateTo($"/View-Exorcist/{character.Id}"))">
                    <h2 class="text-xl font-bold text-purple-400">@character.Name</h2>
                    <p><strong>Id do Usuário:</strong> @character.UserId</p>
                    <p><strong>XID:</strong> @character.CharacterXID</p>
                    <p><strong>CAT:</strong> @character.CAT</p>
                    <p><strong>Gender:</strong> @character.Gender</p>
                    <p><strong>Height:</strong> @character.Height</p>
                    <p><strong>Weight:</strong> @character.Weight</p>
                </div>
            }
        }
    </div>
</main>

@code {
    private List<CharacterDto>? characters;
    private readonly Guid adminId = new Guid("01978a0f-8c46-7a95-a278-e19886de81a2");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (UserSession.UserId == adminId)
            {
                // Se o usuário for o admin, busca todos os personagens
                characters = await Http.GetFromJsonAsync<List<CharacterDto>>("api/User/Character");
            }
            else if (UserSession.UserId != null)
            {
                // Busca apenas os personagens do usuário logado
                characters = await Http.GetFromJsonAsync<List<CharacterDto>>($"api/User/Character/{UserSession.UserId}");
            }
            else
            {
                // Se o usuário não estiver logado, redireciona para a página inicial
                NavigationManager.NavigateTo("/");        
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching characters: {ex.Message}");
        }
    }
}