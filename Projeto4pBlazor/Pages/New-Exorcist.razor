@page "/New-Exorcist"
@using Microsoft.AspNetCore.Components
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http

<PageTitle>New Exorcist</PageTitle>

<div class="min-h-screen bg-black text-purple-800">
    <form class="max-w-sm mx-auto pt-12 pb-12">
        <div class="mb-4">
            <label for="xid" class="block text-white text-sm font-bold mb-2">XID:</label>
            <input id="xid" maxlength="4" 
                   @bind="Xid"
                   @oninput="OnXidInput"
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-100 leading-tight focus:outline-none focus:shadow-outline uppercase" 
                   placeholder="INSERT YOUR XID" 
                   required />
        </div>

        <div class="mb-4">
            <label for="name" class="block text-white text-sm font-bold mb-2">Name:</label>
            <input id="name" 
                   @bind="Name"
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-100 leading-tight focus:outline-none focus:shadow-outline" 
                   placeholder="ENTER YOUR NAME" 
                   required />
        </div>

        <div class="mb-4">
            <label for="age" class="block text-white text-sm font-bold mb-2">Age:</label>
            <input id="age" 
                   @bind="Age"
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-100 leading-tight focus:outline-none focus:shadow-outline" 
                   placeholder="ENTER YOUR AGE"
                   required />
        </div>

        <div class="mb-4">
            <label for="agenda" class="block text-white text-sm font-bold mb-2">Agenda:</label>
            <select id="agenda" 
                    @bind="Agenda"
                    class="bg-black shadow appearance-none border rounded w-full py-2 px-3 text-gray-100 leading-tight focus:outline-none focus:shadow-outline" 
                    required>
                <option value="">Select your Agenda</option>
                <!-- Opções de Agenda podem ser adicionadas aqui -->
            </select>
        </div>

        <div class="mb-6">
            <label for="blasphemy" class="block text-white text-sm font-bold mb-2">Blasphemy:</label>
            <select id="blasphemy"
                    @bind="SelectedBlasphemyId"
                    class="bg-black shadow appearance-none border rounded w-full py-2 px-3 text-gray-100 leading-tight focus:outline-none focus:shadow-outline" 
                    required>
                <option value="">Select your Blasphemy</option>
                @if (isLoading)
                {
                    <option value="" disabled>Loading Blasphemies...</option>
                }
                else
                {
                    @foreach (var blasphemy in blasphemies.OrderBy(b => b.BlasphemyName))
                    {
                        <option value="@blasphemy.Id">@blasphemy.BlasphemyName</option>
                    }
                }
            </select>
            
            @if (!string.IsNullOrEmpty(SelectedBlasphemyId))
            {
                <div class="mt-2 p-2 bg-gray-800 text-purple-300 rounded text-sm">
                    @((MarkupString)GetBlasphemyDescription())
                </div>
            }
        </div>

        @if (ShowProfileSummary())
        {
            <div class="mt-6 p-4 border border-purple-600 rounded-lg bg-gray-900 text-purple-200">
                <h3 class="font-bold text-lg mb-2">Exorcist Profile Summary:</h3>
                <p><span class="font-semibold">XID:</span> @Xid</p>
                <p><span class="font-semibold">Name:</span> @Name</p>
                <p><span class="font-semibold">Age:</span> @Age</p>
                <p><span class="font-semibold">Agenda:</span> @Agenda</p>
                <p><span class="font-semibold">Blasphemy:</span> @GetSelectedBlasphemyName()</p>
                <p class="mt-2 italic">@((MarkupString)GetBlasphemyDescription())</p>
            </div>
        }
    </form>
</div>


@code {
    public class Blasphemy
    {
        public long Id { get; set; }
        public string BlasphemyName { get; set; }
        public string Fact { get; set; }
        public string Passive { get; set; }
        public List<object> BlasphemyAbilities { get; set; }
    }

    private string Xid = "";
    private string Name = "";
    private int? Age;
    private string Agenda = "";
    private string SelectedBlasphemyId = "";
    private List<Blasphemy> blasphemies = new();
    private bool isLoading = true;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("/api/Blasphemy");
            
            if (response.IsSuccessStatusCode)
            {
                blasphemies = await response.Content.ReadFromJsonAsync<List<Blasphemy>>();
                
                // Verifica se "Tension" existe na lista
                var tensionExists = blasphemies.Any(b => 
                    b.BlasphemyName.Equals("Tension", StringComparison.OrdinalIgnoreCase));
                
                if (!tensionExists)
                {
                    Console.WriteLine("Tension not found in blasphemies list");
                }
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load Blasphemies: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }


    private void OnXidInput(ChangeEventArgs e)
    {
        Xid = e.Value?.ToString()?.ToUpper() ?? string.Empty;
    }

    private bool ShowProfileSummary()
    {
        return !string.IsNullOrEmpty(Xid) && 
               !string.IsNullOrEmpty(Name) && 
               Age.HasValue &&
               !string.IsNullOrEmpty(Agenda) &&
               !string.IsNullOrEmpty(SelectedBlasphemyId);
    }

    private string GetSelectedBlasphemyName()
    {
        var selected = blasphemies.FirstOrDefault(b => b.Id.ToString() == SelectedBlasphemyId);
        return selected?.BlasphemyName ?? "Unknown";
    }

    private string GetBlasphemyDescription()
    {
        var selected = blasphemies.FirstOrDefault(b => b.Id.ToString() == SelectedBlasphemyId);
        if (selected == null) return "";
    
        var description = new System.Text.StringBuilder();
    
        if (!string.IsNullOrEmpty(selected.Fact))
        {
            description.AppendLine($"<b>Fact:</b> {selected.Fact}\n");
        }
    
        if (!string.IsNullOrEmpty(selected.Passive))
        {
            description.AppendLine($"<b>Passive:</b> {selected.Passive}\n");
        }
    
        return description.ToString();
}
}

