@inherits LayoutComponentBase
@inject UserSession UserSession
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Projeto4pServer.DTOs

<header class="bg-black fixed top-0 left-0 w-full flex items-center justify-between p-2 border-b border-white">
    <div class="flex items-end p-2">
        <NavLink href="/" class="text-4xl font-bebas text-white hover:underline">
            //:TEMERITY
        </NavLink>
    </div>
    <div class="flex items-center">
        <button class="ring-2 text-white rounded px-5 py-2 mr-2 text-bold cain-button" @onclick="ShowDiceModal">Roll Dice</button>
        @if (isLoggedIn)
        {
            <button class="ring-2 text-white rounded px-5 py-2 mr-2 text-bold cain-button" @onclick="ShowLogoutConfirmation">Welcome, @AtualUserName!</button>
        }
        else
        {
            <button class="ring-2 text-white rounded px-5 py-2 mr-2 text-bold cain-button" @onclick="ToggleLoginPopup">Login</button>
        }
        @if (isLogoutConfirmationVisible)
        {
            <div class="fixed inset-0 flex bg-opacity-50 backdrop-blur-md items-center justify-center">
                <div class="bg-neutral-900 p-6 rounded shadow-lg">
                    <h2 class="text-lg text-gray-50 font-bold mb-4">Are you sure you want to log out?</h2>
                    <div class="flex justify-end">
                        <button class="bg-red-950 hover:bg-red-900 text-white px-4 py-2 rounded mr-2" @onclick="ConfirmLogout">Yes, Log Out</button>
                        <button class="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded" @onclick="CancelLogout">Cancel</button>
                    </div>
                </div>
            </div>
        }
    </div>
</header>
<main class="pt-16">
    @Body
</main>

@if (isLoginPopupVisible)
{
    <div class="fixed inset-0 flex bg-opacity-50 backdrop-blur-md items-center justify-center">
        <div class="bg-neutral-900 p-6 rounded shadow-lg">
            @if (isRegistering)
            {
                <h2 class="text-lg text-gray-50 font-bold mb-4">Register</h2>
                <form @onsubmit="HandleRegister">
                    <div class="mb-4">
                        <label class="block text-white">UserName</label>
                        <input type="text" class="w-full border rounded text-white px-3 py-2" @bind="username" />
                    </div>
                    <div class="mb-4">
                        <label class="block text-white">Email</label>
                        <input type="email" class="w-full border rounded text-white px-3 py-2" @bind="email" />
                    </div>
                    <div class="mb-4">
                        <label class="block text-white">Password</label>
                        <input type="password" class="w-full border rounded text-white px-3 py-2" @bind="password" />
                    </div>
                    <div class="text-red-500">@errorMessage</div>
                    <div class="flex justify-end">
                        <button class="text-white text-sm underline hover:text-cyan-400 mr-2" @onclick="ToggleRegistering">Already have an account? Log in!</button>
                        <button type="button" class="bg-red-950 hover:bg-red-900 text-white px-4 py-2 rounded" @onclick="ToggleLoginPopup">Close</button>
                        <button type="submit" class="bg-indigo-950 hover:bg-indigo-900 text-white px-4 py-2 rounded ml-2">Register</button>
                    </div>
                </form>
            }
            else
            {
                <h2 class="text-lg text-gray-50 font-bold mb-4">Login</h2>
                <form @onsubmit="HandleLogin">
                    <div class="mb-4">
                        <label class="block text-white">Email</label>
                        <input type="text" class="w-full border rounded text-white px-3 py-2" @bind="loginInput" />
                    </div>
                    <div class="mb-4">
                        <label class="block text-white">Password</label>
                        <input type="password" class="w-full border rounded text-white px-3 py-2" @bind="password" />
                    </div>
                    <div class="text-red-500">@errorMessage</div>
                    <div class="flex justify-end">
                        <button class="text-white text-sm underline hover:text-cyan-400 mr-2" @onclick="ToggleRegistering">Not registered? Sign in!</button>
                        <button type="button" class="bg-red-950 hover:bg-red-900 text-white px-4 py-2 rounded" @onclick="ToggleLoginPopup">Close</button>
                        <button type="submit" class="bg-indigo-950 hover:bg-indigo-900 text-white px-4 py-2 rounded ml-2">Login</button>
                    </div>
                </form>
            }
        </div>
    </div>
}

@if (isDiceModalVisible)
{
    <div class="fixed inset-0 flex bg-opacity-50 backdrop-blur-md items-center justify-center z-50">
        <div class="bg-neutral-900 p-6 rounded shadow-lg min-w-[300px]">
            <h2 class="text-lg text-gray-50 font-bold mb-4">Roll your Dice</h2>
            <div class="mb-4 flex items-end gap-4">
                <div>
                    <label class="block text-white mb-1">Modifier</label>
                    <input type="number" class="w-24 border rounded text-white bg-neutral-800 px-2 py-1" style="width: 80px;" @bind="diceModifier" />
                </div>
                <div class="flex flex-col items-center">
                    <label class="text-white text-xs mb-1">&nbsp;</label>
                    <button type="button"
                        class="adv-btn @(hasAdvantage ? "active ring-2 ring-purple-400" : "")"
                        @onclick="ToggleAdvantage">
                        Advantage
                    </button>
                </div>
                <div class="flex flex-col items-center">
                    <label class="text-white text-xs mb-1">&nbsp;</label>
                    <button type="button"
                        class="dis-btn @(hasDisadvantage ? "active ring-2 ring-purple-400" : "")"
                        @onclick="ToggleDisadvantage">
                        Disadvantage
                    </button>
                </div>
            </div>
            <div class="flex flex-wrap gap-2 mb-4">
                <button class="bg-indigo-950 hover:bg-indigo-900 text-white px-4 py-2 rounded dice-btn @(clickedDice == 2 ? "dice-clicked" : "")" @onclick="() => DiceButtonClick(2)">d2</button>
                <button class="bg-indigo-950 hover:bg-indigo-900 text-white px-4 py-2 rounded dice-btn @(clickedDice == 4 ? "dice-clicked" : "")" @onclick="() => DiceButtonClick(4)">d4</button>
                <button class="bg-indigo-950 hover:bg-indigo-900 text-white px-4 py-2 rounded dice-btn @(clickedDice == 6 ? "dice-clicked" : "")" @onclick="() => DiceButtonClick(6)">d6</button>
                <button class="bg-indigo-950 hover:bg-indigo-900 text-white px-4 py-2 rounded dice-btn @(clickedDice == 8 ? "dice-clicked" : "")" @onclick="() => DiceButtonClick(8)">d8</button>
                <button class="bg-indigo-950 hover:bg-indigo-900 text-white px-4 py-2 rounded dice-btn @(clickedDice == 10 ? "dice-clicked" : "")" @onclick="() => DiceButtonClick(10)">d10</button>
                <button class="bg-indigo-950 hover:bg-indigo-900 text-white px-4 py-2 rounded dice-btn @(clickedDice == 20 ? "dice-clicked" : "")" @onclick="() => DiceButtonClick(20)">d20</button>
                <button class="bg-indigo-950 hover:bg-indigo-900 text-white px-4 py-2 rounded dice-btn @(clickedDice == 100 ? "dice-clicked" : "")" @onclick="() => DiceButtonClick(100)">d100</button>
            </div>
            @if (diceResult != null)
            {
                <div class="text-white mb-2">
                    @if (hasAdvantage && lastRoll1 != null && lastRoll2 != null)
                    {
                        <span>
                            Rolls: 
                            <span class="@(lastRoll1 >= lastRoll2 ? "font-bold" : "text-gray-400")">@lastRoll1</span>
                            /
                            <span class="@(lastRoll2 > lastRoll1 ? "font-bold" : "text-gray-400")">@lastRoll2</span>
                        </span>
                    }
                    else if (hasDisadvantage && lastRoll1 != null && lastRoll2 != null)
                    {
                        <span>
                            Rolls: 
                            <span class="@(lastRoll1 <= lastRoll2 ? "font-bold" : "text-gray-400")">@lastRoll1</span>
                            /
                            <span class="@(lastRoll2 < lastRoll1 ? "font-bold" : "text-gray-400")">@lastRoll2</span>
                        </span>
                    }
                    <br />
                    Result: <span class="font-bold">@diceResult</span>
                    @if (diceModifier != 0)
                    {
                        <span class="ml-2 text-gray-300">(with modifier: <span class="font-bold">@((diceResult ?? 0) + diceModifier)</span>)</span>
                    }
                    @if (hasAdvantage)
                    {
                        <span class="ml-2 text-green-400 text-xs">(Advantage)</span>
                    }
                    @if (hasDisadvantage)
                    {
                        <span class="ml-2 text-red-400 text-xs">(Disadvantage)</span>
                    }
                </div>
            }
            <div class="flex justify-end">
                <button class="bg-red-950 hover:bg-red-900 text-white px-4 py-2 rounded" @onclick="HideDiceModal">Close</button>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoginPopupVisible = false;
    private bool isRegistering = false;
    private bool isLogoutConfirmationVisible = false;
    private bool isLoggedIn = false; // Indica se o usuário está logado
    private string username = string.Empty; // Para registro e exibição
    public string AtualUserName { get; set; } = string.Empty; // Nome de usuário atual
    private string loginInput = string.Empty; // Novo campo para login (username ou email)
    private string email = string.Empty; 
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private Guid? userId = null;
    // Dice modal state
    private bool isDiceModalVisible = false;
    private int? diceResult = null;
    private static readonly Random rng = new();
    private int? clickedDice = null;
    private int diceModifier = 0;
    private bool hasAdvantage = false;
    private bool hasDisadvantage = false;
    private int? lastRoll1 = null;
    private int? lastRoll2 = null;

    private void ToggleAdvantage()
    {
        if (!hasAdvantage)
        {
            hasAdvantage = true;
            hasDisadvantage = false;
        }
        else
        {
            hasAdvantage = false;
        }
    }

    private void ToggleDisadvantage()
    {
        if (!hasDisadvantage)
        {
            hasDisadvantage = true;
            hasAdvantage = false;
        }
        else
        {
            hasDisadvantage = false;
        }
    }

    private bool HasAdvantage
    {
        get => hasAdvantage;
        set
        {
            if (value)
                hasDisadvantage = false;
            hasAdvantage = value;
        }
    }

    private bool HasDisadvantage
    {
        get => hasDisadvantage;
        set
        {
            if (value)
                hasAdvantage = false;
            hasDisadvantage = value;
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/User/register", new { userName = username, Email = email, Password = password });
            if (response.IsSuccessStatusCode)
            {
                // Registro bem-sucedido
                var result = await response.Content.ReadFromJsonAsync<dynamic>();
                Console.WriteLine($"Registration successful: {result}");
                ToggleRegistering();
                errorMessage = "Registrado com Sucesso!";
            }
            else
            {   
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    <!-- sistema de login -->
    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/User/login", new { userName = loginInput, Email = loginInput, Password = password });
            if (response.IsSuccessStatusCode)
            {
                // Login bem-sucedido
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null)
                {
                    email = result.Email; // Obtém o email do retorno da API
                    username = result.UserName; // Obtém o username do retorno da API
                    isLoggedIn = true; // Marca como logado
                    AtualUserName = username; // Atualiza o nome de usuário atual
                    userId = result.UserId;
                    UserSession.UserId = userId;
                    UserSession.UserName = AtualUserName;
                    ToggleLoginPopup();
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void ToggleLoginPopup()
    {
        isLoginPopupVisible = !isLoginPopupVisible;
        if (!isLoginPopupVisible)
        {
            isRegistering = false; // Reset to login when popup is closed
            username = string.Empty;
            email = string.Empty;
            password = string.Empty;
            errorMessage = string.Empty;
        }
    }

    private void ToggleRegistering()
    {
        isRegistering = !isRegistering;
        username = string.Empty;
        email = string.Empty;
        password = string.Empty;
        errorMessage = string.Empty;
    }

    private void ConfirmLogout()
    {
        isLoggedIn = false; // Define o estado como deslogado
        username = string.Empty; // Limpa o nome do usuário
        email = string.Empty; // Limpa o email
        password = string.Empty; // Limpa a senha
        errorMessage = string.Empty; // Limpa mensagens de erro
        isLogoutConfirmationVisible = false; // Fecha a confirmação
        UserSession.UserId = null; // Limpa o ID do usuário na sessão
        NavigationManager.NavigateTo("/");
    }
    private void ShowLogoutConfirmation()
    {
        isLogoutConfirmationVisible = true;
    }
    private void CancelLogout()
    {
        isLogoutConfirmationVisible = false;
    }

    private void ShowDiceModal()
    {
        isDiceModalVisible = true;
        diceResult = null;
        lastRoll1 = null;
        lastRoll2 = null;
    }

    private void HideDiceModal()
    {
        isDiceModalVisible = false;
        diceResult = null;
        lastRoll1 = null;
        lastRoll2 = null;
    }

    <!-- sistema de rolagem de dados -->
    private void RollDice(int sides)
    {
        if (hasAdvantage)
        {
            lastRoll1 = rng.Next(1, sides + 1);
            lastRoll2 = rng.Next(1, sides + 1);
            diceResult = Math.Max(lastRoll1.Value, lastRoll2.Value);
        }
        else if (hasDisadvantage)
        {
            lastRoll1 = rng.Next(1, sides + 1);
            lastRoll2 = rng.Next(1, sides + 1);
            diceResult = Math.Min(lastRoll1.Value, lastRoll2.Value);
        }
        else
        {
            diceResult = rng.Next(1, sides + 1);
            lastRoll1 = null;
            lastRoll2 = null;
        }
    }

    private async void DiceButtonClick(int sides)
    {
        clickedDice = sides;
        RollDice(sides);
        StateHasChanged();
        await Task.Delay(120);
        clickedDice = null;
        StateHasChanged();
    }
}
